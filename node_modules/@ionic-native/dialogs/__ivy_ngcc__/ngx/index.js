import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var Dialogs = /** @class */ (function (_super) {
    __extends(Dialogs, _super);
    function Dialogs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Dialogs.prototype.alert = function (message, title, buttonName) { return cordova(this, "alert", { "successIndex": 1, "errorIndex": 4 }, arguments); };
    Dialogs.prototype.confirm = function (message, title, buttonLabels) { return cordova(this, "confirm", { "successIndex": 1, "errorIndex": 4 }, arguments); };
    Dialogs.prototype.prompt = function (message, title, buttonLabels, defaultText) { return cordova(this, "prompt", { "successIndex": 1, "errorIndex": 5 }, arguments); };
    Dialogs.prototype.beep = function (times) { return cordova(this, "beep", { "sync": true }, arguments); };
    Dialogs.pluginName = "Dialogs";
    Dialogs.plugin = "cordova-plugin-dialogs";
    Dialogs.pluginRef = "navigator.notification";
    Dialogs.repo = "https://github.com/apache/cordova-plugin-dialogs";
    Dialogs.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
Dialogs.ɵfac = /*@__PURE__*/ function () { var ɵDialogs_BaseFactory; return function Dialogs_Factory(t) { return (ɵDialogs_BaseFactory || (ɵDialogs_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Dialogs)))(t || Dialogs); }; }();
Dialogs.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Dialogs, factory: function (t) { return Dialogs.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Dialogs, [{
        type: Injectable
    }], null, null); })();
    return Dialogs;
}(IonicNativePlugin));
export { Dialogs };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvZGlhbG9ncy9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7QUFDeEU7QUFHQyxJQTJDNEIsMkJBQWlCO0FBQUM7QUFFOUI7QUFFYjtBQUFNLElBUVIsdUJBQUssYUFBQyxPQUFlLEVBQUUsS0FBYyxFQUFFLFVBQW1CO0FBS1osSUFVOUMseUJBQU8sYUFBQyxPQUFlLEVBQUUsS0FBYyxFQUFFLFlBQXVCO0FBS25CLElBVzdDLHdCQUFNLGFBQ0osT0FBZ0IsRUFDaEIsS0FBYyxFQUNkLFlBQXVCLEVBQ3ZCLFdBQW9CO0FBTUksSUFNMUIsc0JBQUksYUFBQyxLQUFhO0FBRWlDO0FBQW9DO0FBQStDO0FBQWtEO0FBQXVFOzJDQTlEaFEsVUFBVTs7OzswQkFDTDtBQUFDLGtCQWhEUDtBQUFFLEVBZ0QyQixpQkFBaUI7QUFDN0MsU0FEWSxPQUFPO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBEaWFsb2dzUHJvbXB0Q2FsbGJhY2sge1xuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBwcmVzc2VkIGJ1dHRvbi4gKE51bWJlcikgTm90ZSB0aGF0IHRoZSBpbmRleCB1c2VzIG9uZS1iYXNlZCBpbmRleGluZywgc28gdGhlIHZhbHVlIGlzIDEsIDIsIDMsIGV0Yy5cbiAgICovXG4gIGJ1dHRvbkluZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0ZXh0IGVudGVyZWQgaW4gdGhlIHByb21wdCBkaWFsb2cgYm94LiAoU3RyaW5nKVxuICAgKi9cbiAgaW5wdXQxOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgRGlhbG9nc1xuICogQHByZW1pZXIgZGlhbG9nc1xuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBnaXZlcyB5b3UgYWJpbGl0eSB0byBhY2Nlc3MgYW5kIGN1c3RvbWl6ZSB0aGUgZGV2aWNlIG5hdGl2ZSBkaWFsb2dzLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tZGlhbG9nc2AuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtEaWFsb2dzIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWRpYWxvZ3MpLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRGlhbG9ncyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZGlhbG9ncy9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlhbG9nczogRGlhbG9ncykgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5kaWFsb2dzLmFsZXJ0KCdIZWxsbyB3b3JsZCcpXG4gKiAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdEaWFsb2cgZGlzbWlzc2VkJykpXG4gKiAgIC5jYXRjaChlID0+IGNvbnNvbGUubG9nKCdFcnJvciBkaXNwbGF5aW5nIGRpYWxvZycsIGUpKTtcbiAqXG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogRGlhbG9nc1Byb21wdENhbGxiYWNrXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnRGlhbG9ncycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWRpYWxvZ3MnLFxuICBwbHVnaW5SZWY6ICduYXZpZ2F0b3Iubm90aWZpY2F0aW9uJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZGlhbG9ncycsXG4gIHBsYXRmb3JtczogWydBbWF6b24gRmlyZSBPUycsICdBbmRyb2lkJywgJ0Jyb3dzZXInLCAnaU9TJywgJ1dpbmRvd3MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGlhbG9ncyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFNob3dzIGEgY3VzdG9tIGFsZXJ0IG9yIGRpYWxvZyBib3guXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIERpYWxvZyBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSBEaWFsb2cgdGl0bGUuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gQWxlcnQpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbYnV0dG9uTmFtZV0gQnV0dG9uIG5hbWUuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gT0spXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBibGFuayBwcm9taXNlIG9uY2UgdGhlIHVzZXIgaGFzIGRpc21pc3NlZCB0aGUgYWxlcnQuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDQsXG4gIH0pXG4gIGFsZXJ0KG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIGJ1dHRvbk5hbWU/OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyBhIGN1c3RvbWl6YWJsZSBjb25maXJtYXRpb24gZGlhbG9nIGJveC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgRGlhbG9nIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdIERpYWxvZyB0aXRsZS4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBDb25maXJtKVxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbYnV0dG9uTGFiZWxzXSBBcnJheSBvZiBzdHJpbmdzIHNwZWNpZnlpbmcgYnV0dG9uIGxhYmVscy4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBbT0ssQ2FuY2VsXSlcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0aGUgYnV0dG9uIGluZGV4IHRoYXQgd2FzIGNsaWNrZWQsIG9yIDAgaWYgdGhlIHVzZXIgaGFzIGRpc21pc3NlZCB0aGUgZGlhbG9nIGJ5IGNsaWNraW5nIG91dHNpZGUgdGhlIGRpYWxvZyBib3guIE5vdGUgdGhhdCB0aGUgaW5kZXggdXNlIG9uZS1iYXNlZCBpbmRleGluZy5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogNCxcbiAgfSlcbiAgY29uZmlybShtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBidXR0b25MYWJlbHM/OiBzdHJpbmdbXSk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIGEgbmF0aXZlIGRpYWxvZyBib3ggdGhhdCBpcyBtb3JlIGN1c3RvbWl6YWJsZSB0aGFuIHRoZSBicm93c2VyJ3MgcHJvbXB0IGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW21lc3NhZ2VdIERpYWxvZyBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3RpdGxlXSBEaWFsb2cgdGl0bGUuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gUHJvbXB0KVxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbYnV0dG9uTGFiZWxzXSAgQXJyYXkgb2Ygc3RyaW5ncyBzcGVjaWZ5aW5nIGJ1dHRvbiBsYWJlbHMuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gW1wiT0tcIixcIkNhbmNlbFwiXSlcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtkZWZhdWx0VGV4dF0gRGVmYXVsdCB0ZXh0IGJveCBpbnB1dCB2YWx1ZS4gIChPcHRpb25hbCwgRGVmYXVsdDogZW1wdHkgc3RyaW5nKVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEaWFsb2dzUHJvbXB0Q2FsbGJhY2s+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGFuIG9iamVjdCB3aXRoIHRoZSBidXR0b24gaW5kZXggY2xpY2tlZCBhbmQgdGhlIHRleHQgZW50ZXJlZFxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMSxcbiAgICBlcnJvckluZGV4OiA1LFxuICB9KVxuICBwcm9tcHQoXG4gICAgbWVzc2FnZT86IHN0cmluZyxcbiAgICB0aXRsZT86IHN0cmluZyxcbiAgICBidXR0b25MYWJlbHM/OiBzdHJpbmdbXSxcbiAgICBkZWZhdWx0VGV4dD86IHN0cmluZ1xuICApOiBQcm9taXNlPERpYWxvZ3NQcm9tcHRDYWxsYmFjaz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZGV2aWNlIHBsYXlzIGEgYmVlcCBzb3VuZC5cbiAgICogQHBhcmFtIHtudW1iZXJzfSB0aW1lcyBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgYmVlcC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBiZWVwKHRpbWVzOiBudW1iZXIpOiB2b2lkIHt9XG59XG4iXX0=