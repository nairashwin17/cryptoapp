{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nexport interface DialogsPromptCallback {\n    /**\n     * The index of the pressed button. (Number) Note that the index uses one-based indexing, so the value is 1, 2, 3, etc.\n     */\n    buttonIndex: number;\n    /**\n     * The text entered in the prompt dialog box. (String)\n     */\n    input1: string;\n}\n/**\n * @name Dialogs\n * @premier dialogs\n * @description\n * This plugin gives you ability to access and customize the device native dialogs.\n *\n * Requires Cordova plugin: `cordova-plugin-dialogs`. For more info, please see the [Dialogs plugin docs](https://github.com/apache/cordova-plugin-dialogs).\n *\n * @usage\n * ```typescript\n * import { Dialogs } from '@ionic-native/dialogs/ngx';\n *\n * constructor(private dialogs: Dialogs) { }\n *\n * ...\n *\n * this.dialogs.alert('Hello world')\n *   .then(() => console.log('Dialog dismissed'))\n *   .catch(e => console.log('Error displaying dialog', e));\n *\n *\n * ```\n * @interfaces\n * DialogsPromptCallback\n */\nexport declare class Dialogs extends IonicNativePlugin {\n    /**\n     * Shows a custom alert or dialog box.\n     * @param {string} message Dialog message.\n     * @param {string} [title] Dialog title. (Optional, defaults to Alert)\n     * @param {string} [buttonName] Button name. (Optional, defaults to OK)\n     * @returns {Promise<any>} Returns a blank promise once the user has dismissed the alert.\n     */\n    alert(message: string, title?: string, buttonName?: string): Promise<any>;\n    /**\n     * Displays a customizable confirmation dialog box.\n     * @param {string} message Dialog message.\n     * @param {string} [title] Dialog title. (Optional, defaults to Confirm)\n     * @param {string[]} [buttonLabels] Array of strings specifying button labels. (Optional, defaults to [OK,Cancel])\n     * @returns {Promise<number>} Returns a promise that resolves the button index that was clicked, or 0 if the user has dismissed the dialog by clicking outside the dialog box. Note that the index use one-based indexing.\n     */\n    confirm(message: string, title?: string, buttonLabels?: string[]): Promise<number>;\n    /**\n     * Displays a native dialog box that is more customizable than the browser's prompt function.\n     * @param {string} [message] Dialog message.\n     * @param {string} [title] Dialog title. (Optional, defaults to Prompt)\n     * @param {string[]} [buttonLabels]  Array of strings specifying button labels. (Optional, defaults to [\"OK\",\"Cancel\"])\n     * @param {string} [defaultText] Default text box input value.  (Optional, Default: empty string)\n     * @returns {Promise<DialogsPromptCallback>} Returns a promise that resolves an object with the button index clicked and the text entered\n     */\n    prompt(message?: string, title?: string, buttonLabels?: string[], defaultText?: string): Promise<DialogsPromptCallback>;\n    /**\n     * The device plays a beep sound.\n     * @param {numbers} times The number of times to repeat the beep.\n     */\n    beep(times: number): void;\n}\n"]}