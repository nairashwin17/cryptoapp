import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Dialogs = /** @class */ (function (_super) {
    __extends(Dialogs, _super);
    function Dialogs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Dialogs.prototype.alert = function (message, title, buttonName) { return cordova(this, "alert", { "successIndex": 1, "errorIndex": 4 }, arguments); };
    Dialogs.prototype.confirm = function (message, title, buttonLabels) { return cordova(this, "confirm", { "successIndex": 1, "errorIndex": 4 }, arguments); };
    Dialogs.prototype.prompt = function (message, title, buttonLabels, defaultText) { return cordova(this, "prompt", { "successIndex": 1, "errorIndex": 5 }, arguments); };
    Dialogs.prototype.beep = function (times) { return cordova(this, "beep", { "sync": true }, arguments); };
    Dialogs.pluginName = "Dialogs";
    Dialogs.plugin = "cordova-plugin-dialogs";
    Dialogs.pluginRef = "navigator.notification";
    Dialogs.repo = "https://github.com/apache/cordova-plugin-dialogs";
    Dialogs.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
    Dialogs.decorators = [
        { type: Injectable }
    ];
    return Dialogs;
}(IonicNativePlugin));
export { Dialogs };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2RpYWxvZ3Mvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBK0MzQywyQkFBaUI7Ozs7SUFZNUMsdUJBQUssYUFBQyxPQUFlLEVBQUUsS0FBYyxFQUFFLFVBQW1CO0lBZTFELHlCQUFPLGFBQUMsT0FBZSxFQUFFLEtBQWMsRUFBRSxZQUF1QjtJQWdCaEUsd0JBQU0sYUFDSixPQUFnQixFQUNoQixLQUFjLEVBQ2QsWUFBdUIsRUFDdkIsV0FBb0I7SUFZdEIsc0JBQUksYUFBQyxLQUFhOzs7Ozs7O2dCQTVEbkIsVUFBVTs7a0JBL0NYO0VBZ0Q2QixpQkFBaUI7U0FBakMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpYWxvZ3NQcm9tcHRDYWxsYmFjayB7XG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIHByZXNzZWQgYnV0dG9uLiAoTnVtYmVyKSBOb3RlIHRoYXQgdGhlIGluZGV4IHVzZXMgb25lLWJhc2VkIGluZGV4aW5nLCBzbyB0aGUgdmFsdWUgaXMgMSwgMiwgMywgZXRjLlxuICAgKi9cbiAgYnV0dG9uSW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHRleHQgZW50ZXJlZCBpbiB0aGUgcHJvbXB0IGRpYWxvZyBib3guIChTdHJpbmcpXG4gICAqL1xuICBpbnB1dDE6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBEaWFsb2dzXG4gKiBAcHJlbWllciBkaWFsb2dzXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGdpdmVzIHlvdSBhYmlsaXR5IHRvIGFjY2VzcyBhbmQgY3VzdG9taXplIHRoZSBkZXZpY2UgbmF0aXZlIGRpYWxvZ3MuXG4gKlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1kaWFsb2dzYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0RpYWxvZ3MgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZGlhbG9ncykuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBEaWFsb2dzIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9kaWFsb2dzL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBkaWFsb2dzOiBEaWFsb2dzKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLmRpYWxvZ3MuYWxlcnQoJ0hlbGxvIHdvcmxkJylcbiAqICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0RpYWxvZyBkaXNtaXNzZWQnKSlcbiAqICAgLmNhdGNoKGUgPT4gY29uc29sZS5sb2coJ0Vycm9yIGRpc3BsYXlpbmcgZGlhbG9nJywgZSkpO1xuICpcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBEaWFsb2dzUHJvbXB0Q2FsbGJhY2tcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdEaWFsb2dzJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZGlhbG9ncycsXG4gIHBsdWdpblJlZjogJ25hdmlnYXRvci5ub3RpZmljYXRpb24nLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1kaWFsb2dzJyxcbiAgcGxhdGZvcm1zOiBbJ0FtYXpvbiBGaXJlIE9TJywgJ0FuZHJvaWQnLCAnQnJvd3NlcicsICdpT1MnLCAnV2luZG93cyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEaWFsb2dzIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogU2hvd3MgYSBjdXN0b20gYWxlcnQgb3IgZGlhbG9nIGJveC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgRGlhbG9nIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdIERpYWxvZyB0aXRsZS4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBBbGVydClcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtidXR0b25OYW1lXSBCdXR0b24gbmFtZS4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBPSylcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIGJsYW5rIHByb21pc2Ugb25jZSB0aGUgdXNlciBoYXMgZGlzbWlzc2VkIHRoZSBhbGVydC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogNCxcbiAgfSlcbiAgYWxlcnQobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZywgYnV0dG9uTmFtZT86IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIGEgY3VzdG9taXphYmxlIGNvbmZpcm1hdGlvbiBkaWFsb2cgYm94LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBEaWFsb2cgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0aXRsZV0gRGlhbG9nIHRpdGxlLiAoT3B0aW9uYWwsIGRlZmF1bHRzIHRvIENvbmZpcm0pXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IFtidXR0b25MYWJlbHNdIEFycmF5IG9mIHN0cmluZ3Mgc3BlY2lmeWluZyBidXR0b24gbGFiZWxzLiAoT3B0aW9uYWwsIGRlZmF1bHRzIHRvIFtPSyxDYW5jZWxdKVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxudW1iZXI+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRoZSBidXR0b24gaW5kZXggdGhhdCB3YXMgY2xpY2tlZCwgb3IgMCBpZiB0aGUgdXNlciBoYXMgZGlzbWlzc2VkIHRoZSBkaWFsb2cgYnkgY2xpY2tpbmcgb3V0c2lkZSB0aGUgZGlhbG9nIGJveC4gTm90ZSB0aGF0IHRoZSBpbmRleCB1c2Ugb25lLWJhc2VkIGluZGV4aW5nLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMSxcbiAgICBlcnJvckluZGV4OiA0LFxuICB9KVxuICBjb25maXJtKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIGJ1dHRvbkxhYmVscz86IHN0cmluZ1tdKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGlzcGxheXMgYSBuYXRpdmUgZGlhbG9nIGJveCB0aGF0IGlzIG1vcmUgY3VzdG9taXphYmxlIHRoYW4gdGhlIGJyb3dzZXIncyBwcm9tcHQgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbWVzc2FnZV0gRGlhbG9nIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdGl0bGVdIERpYWxvZyB0aXRsZS4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBQcm9tcHQpXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IFtidXR0b25MYWJlbHNdICBBcnJheSBvZiBzdHJpbmdzIHNwZWNpZnlpbmcgYnV0dG9uIGxhYmVscy4gKE9wdGlvbmFsLCBkZWZhdWx0cyB0byBbXCJPS1wiLFwiQ2FuY2VsXCJdKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2RlZmF1bHRUZXh0XSBEZWZhdWx0IHRleHQgYm94IGlucHV0IHZhbHVlLiAgKE9wdGlvbmFsLCBEZWZhdWx0OiBlbXB0eSBzdHJpbmcpXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPERpYWxvZ3NQcm9tcHRDYWxsYmFjaz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgYW4gb2JqZWN0IHdpdGggdGhlIGJ1dHRvbiBpbmRleCBjbGlja2VkIGFuZCB0aGUgdGV4dCBlbnRlcmVkXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDUsXG4gIH0pXG4gIHByb21wdChcbiAgICBtZXNzYWdlPzogc3RyaW5nLFxuICAgIHRpdGxlPzogc3RyaW5nLFxuICAgIGJ1dHRvbkxhYmVscz86IHN0cmluZ1tdLFxuICAgIGRlZmF1bHRUZXh0Pzogc3RyaW5nXG4gICk6IFByb21pc2U8RGlhbG9nc1Byb21wdENhbGxiYWNrPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBkZXZpY2UgcGxheXMgYSBiZWVwIHNvdW5kLlxuICAgKiBAcGFyYW0ge251bWJlcnN9IHRpbWVzIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBiZWVwLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIGJlZXAodGltZXM6IG51bWJlcik6IHZvaWQge31cbn1cbiJdfQ==